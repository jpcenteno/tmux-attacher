#!/bin/sh
set -eu

#!/bin/sh


# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Logging functions                                                      ║
# ╚════════════════════════════════════════════════════════════════════════╝

COLOR_LIGHT_RED='\033[91m'
COLOR_LIGHT_BLUE='\033[94m'
COLOR_LIGHT_GREEN='\033[92m'
COLOR_RESET='\033[0m'

log_message() {
    printf "${COLOR_LIGHT_BLUE}%s${COLOR_RESET}\n" "${1}"
}

log_error() {
    printf "${COLOR_LIGHT_RED}%s${COLOR_RESET}\n" "${1}"
}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Aux functions                                                          ║
# ╚════════════════════════════════════════════════════════════════════════╝

# Fails if the command $1 is not present in the $PATH.
has_command() {
    command -v "${1}" 2>&1 > /dev/null;
}

has_command_or_die() {
    if ! has_command "${1}"; then
        log_error "Command unavailable: ${1}"
        exit 1
    fi
}

tmux_session_exists() {
    tmux has-session -t "${1}" 2>/dev/null
}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ User prompt helpers                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

# Print text to be used in a prompt. Does not include the `read` command.
ui_format_prompt() {
    # Prints the text provided in `${1}` with light green color and no newline.
    printf "${COLOR_LIGHT_GREEN}%s${COLOR_RESET} " "${1}"
}

# Prints a message displaying the user the available Tmux sessions.
ui_list_sessions() {
    log_message "Available Tmux sessions:"
    tmux list-sessions
}

# Prompts the user to name a session to attach to.
ui_ask_user_what_to_do() {
    echo
    log_message "a -- Attach to an existing session."
    log_message "n -- Attach to a new session."
    log_message "q -- Cancel."
    ui_format_prompt "What should we do? [a,n,q]:"
    read user_selection
}

ui_ask_user_to_name_a_session() {
    log_message "Provide a session name:"
    printf '> '
    read session_name
}

# Asks the user to provide a name for a new Tmux session. Sets `$session_name`.
ui_prompt_user_for_new_session_name() {
    log_message "Provide a name for the new session:"
    printf '> '
    read session_name
}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Script starts here:                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

has_command_or_die "tmux" # Required for user prompts.

# If any arguments were provided to the script, delegate them to `tmux`, then
# exit. We only care about extending the functionality with an interactive
# prompt in case no arguments were provided.
if [ "${#}" -ne "0" ]; then
    tmux ${@}
    exit "${?}" # Resend `tmux` exit status code.
fi

ui_list_sessions

ui_ask_user_what_to_do # Sets `$user_selection`.

case "${user_selection}" in

    a)
        # --------------------------------------------------------------------------
        # Option "a" -- Attach to an existing session.
        # --------------------------------------------------------------------------
        ui_ask_user_to_name_a_session # Sets `$session_name`

        # Ensure that the provided session exists or exit with error.
        if ! tmux_session_exists "${session_name}"; then
            log_error "Error: No active session named: ${session_name}"
            exit 1
        fi

        # Attach to the chosen session.
        tmux attach -t "${session_name}"
        exit "${?}"

        break
        ;;

    n)
        # --------------------------------------------------------------------------
        # Option "n" -- Attach to a new named session.
        # --------------------------------------------------------------------------

        ui_prompt_user_for_new_session_name # Sets `$session_name`.

        # Ensure that the provided session name is not already taken.
        if tmux_session_exists "${session_name}"; then
            log_error "Error: Session named '${session_name}' exists!"
            exit 1
        fi

        # Attach to a new session with the chosen name.
        tmux new-session -s "${session_name}"
        exit "${?}"

        break
        ;;

    q)
        # --------------------------------------------------------------------------
        # Option "q" -- Gracefully quit. 
        # --------------------------------------------------------------------------
        exit 0
        break
        ;;

    *)
        # --------------------------------------------------------------------------
        # Fallback case -- Bad option.
        # --------------------------------------------------------------------------
        log_error "Invalid option: ${user_selection}"
        exit 1
        break
        ;;
esac
