#!/bin/sh
set -eu

# The sole purpose of this script is to override the default behavior of `tmux`
# when called without any arguments by adding a nice user interface that helps
# the user to keep the active sessions named and organized.
#
# The following conditional short circuits if the user passed any argument to
# the script by directly delegating them to `tmux`.
#
#
# Disabling SC2068. Re-splitting elements from $@ is intentional in this case.
# shellcheck disable=SC2068
[ "${#}" -eq 0 ] || exec tmux ${@}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Aux functions                                                          ║
# ╚════════════════════════════════════════════════════════════════════════╝

die() {
    echo "${1}"
    exit 1
}

# Fails if the command $1 is not present in the $PATH.
has_command() {
    command -v "${1}" >/dev/null 2>&1 
}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ User prompt helpers                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

prompt_user_select_tmux_session() {
    {
        echo '[new session]'
        tmux list-sessions -F '#{session_name}'
    } | gum choose --select-if-one
}


# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Script starts here:                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

has_command 'tmux' || die "Program 'tmux (1)' not found in \$PATH"
has_command 'gum' || die "Program 'gum (1)' not found in \$PATH"

session_name="$( prompt_user_select_tmux_session )"

if [ "${session_name}" = "[new session]" ]; then
    session_name="$( gum input --placeholder "New session name" )"

    # Create a detached session with the provided name (flag `-d`). We will
    # attach to it later in the script. This will fail if there is already a
    # session with the provided name.
    tmux new-session -s "${session_name}" -d
fi

if [ -z "${TMUX:-}" ]; then
    # When the script IS NOT running inside a Tmux session, we should use the
    # `attach-session` subcommand, which creates a new client.
    #
    # DO NOT use the `switch-client` subcommand in this scenario. It will affect
    # another running TMUX clients leading to unexpected behavior instead of
    # starting a new client.
    COMMAND="attach-session"
else
    # When the script IS running inside Tmux, we SHOULD use the `switch-client`
    # subcommand which affects the current client.
    #
    # DO NOT use this command outside a tmux client as it will affect another
    # running TMUX clients leading to unexpected behavior.
    COMMAND="switch-client"
fi

exec tmux "${COMMAND}" -t "${session_name}"
