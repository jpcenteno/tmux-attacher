#!/bin/sh
set -eu

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Aux functions                                                          ║
# ╚════════════════════════════════════════════════════════════════════════╝

# Fails if the command $1 is not present in the $PATH.
has_command() {
    command -v "${1}" >/dev/null 2>&1 
}

# ╔════════════════════════════════════════════════════════════════════════╗
# ║ User prompt helpers                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

prompt_user_select_tmux_session() {
    {
        echo '[new session]'
        tmux list-sessions -F '#{session_name}'
    } | gum choose --select-if-one
}


# ╔════════════════════════════════════════════════════════════════════════╗
# ║ Script starts here:                                                    ║
# ╚════════════════════════════════════════════════════════════════════════╝

if ! has_command 'gum'; then
    echo 'FATAL:'
    echo "${0} requires 'gum' to provide interactive prompts."
    echo "Install 'gum' and ensure it is available in your PATH"
    exit 1
fi

has_command 'tmux' || gum log --level fatal --structured 'Required program not found in PATH' program 'tmux'

# If any other arguments were provided to the script, delegate them to `tmux`,
# then exit. We only care about extending the functionality with an interactive
# prompt in case no arguments were provided.
#
# Disabling SC2068. Re-splitting elements from $@ is intentional.
# shellcheck disable=SC2068
[ "${#}" -eq 0 ] || exec tmux ${@}

session_name="$( prompt_user_select_tmux_session )"

if [ "${session_name}" = "[new session]" ]; then
    session_name="$( gum input --placeholder "New session name" )"

    # Create a detached session with the provided name (flag `-d`). We will
    # attach to it later in the script. This will fail if there is already a
    # session with the provided name.
    tmux new-session -s "${session_name}" -d
fi

gum log --level debug --structured 'Attaching session' session "${session_name}"
exec tmux attach -t "${session_name}"
